"use client";
import { useState, useRef } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useUser } from "@/hooks/user-context";
import Logout from "@/components/logout/logout";
import { useNotificationManager } from "@/hooks/notification-context";
import axi from "@/utils/api";

export default function AuthenticationPage() {
  const { user, isLoading, fetchUser } = useUser(); // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º isLoading
  const { addNotification } = useNotificationManager();
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  const formRef = useRef<HTMLFormElement>(null);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const data = new FormData(e.currentTarget);
    const formData = new FormData();
    formData.append("login", data.get("login") as string);
    formData.append("password", data.get("password") as string);

    try {
      setLoading(true);
      const res = await axi.post("/account/login", formData, {
        validateStatus: () => true,
      });

      if (res.status === 200 && res.data.token) {
        localStorage.setItem("token", res.data.token);

        let userData = res.data.user;

        if (!userData && fetchUser) {
          try {
            userData = await fetchUser();
          } catch (err) {
            console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ fetchUser:", err);
          }
        }

        if (!userData) {
          const cached = localStorage.getItem("user");
          if (cached) userData = JSON.parse(cached);
        }

        if (userData) {
          localStorage.setItem("user", JSON.stringify(userData));
        }

        addNotification({
          id: Date.now().toString(),
          title: "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
          status: 200,
          createdAt: new Date().toISOString(),
        });

        formRef.current?.reset();

        // üöÄ –ü–µ—Ä–µ—Ö–æ–¥ —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
        if (userData?.username === "admin" || userData?.is_superuser) {
          window.location.href = "/admin";
        } else {
          window.location.href = "/";
        }
      } else {
        addNotification({
          id: Date.now().toString(),
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: res.data?.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
          status: res.status,
          createdAt: new Date().toISOString(),
        });
      }
    } finally {
      setLoading(false);
    }
  };

  // üïì –ü–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-20 w-20 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Logout
  if (user) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Logout />
      </div>
    );
  }

  // üßæ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <form
        ref={formRef}
        onSubmit={handleSubmit}
        className="bg-white p-8 rounded-lg shadow-md w-full max-w-md"
      >
        <h2 className="text-2xl font-bold mb-6 text-center">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>

        <div className="mb-4">
          <Label htmlFor="login">Username</Label>
          <Input
            name="login"
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            className="mt-1"
            autoComplete="off"
            required
          />
        </div>

        <div className="mb-6">
          <Label htmlFor="password">Password</Label>
          <Input
            name="password"
            type="password"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            className="mt-1"
            autoComplete="off"
            required
          />
        </div>

        <Button type="submit" className="w-full" disabled={loading}>
          {loading ? "–í—Ö–æ–¥–∏–º..." : "–í–æ–π—Ç–∏"}
        </Button>
      </form>
    </div>
  );
}
