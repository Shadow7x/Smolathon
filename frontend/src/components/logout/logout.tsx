"use client";
import { Button } from "@/components/ui/button";
import { useUser } from "@/hooks/user-context";
import { useNotificationManager } from "@/hooks/notification-context";
import { useRouter } from "next/navigation";
import axi from "@/utils/api";

export default function Logout() {
  const { clearUser } = useUser();
  const { addNotification } = useNotificationManager();
  const router = useRouter();

  const handleLogout = async () => {
    try {
      const token = localStorage.getItem("token");

      if (!token) {
        addNotification({
          id: Date.now().toString(),
          title: "–û—à–∏–±–∫–∞",
          description: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
          status: 401,
          createdAt: new Date().toISOString(),
        });
        router.push("/"); // üîÑ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        return;
      }

      const res = await axi.get("/account/logout", {
        headers: { Authorization: `Bearer ${token}` },
        validateStatus: () => true,
      });

      // ‚úÖ –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      localStorage.removeItem("token");
      clearUser?.();

      addNotification({
        id: Date.now().toString(),
        title: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        description:
          res.status === 200 ? "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞" : "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ",
        status: 200,
        createdAt: new Date().toISOString(),
      });

      // üöÄ –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      router.push("/");
    } catch (err) {
      localStorage.removeItem("token");
      clearUser?.();

      addNotification({
        id: Date.now().toString(),
        title: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
        description: "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ",
        status: 200,
        createdAt: new Date().toISOString(),
      });

      router.push("/"); // üöÄ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    }
  };

  return (
    <Button
      variant="outline"
      onClick={handleLogout}
      className="text-black hover:bg-red-50 hover:text-red-600"
    >
      –í—ã–π—Ç–∏
    </Button>
  );
}
